import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import moment from 'moment';
import { RootState, AppThunk } from '../../app/store';
import { fetchTodos } from './todolistAPI';

export interface TodoType {
	id: number;
	title: string;
	description: string;
	status: number;
	createdAt: string | Date;
}

export interface TodoState {
	value: TodoType[];
	status: 'idle' | 'loading' | 'failed';
}

const initialState: TodoState = {
	value: [],
	status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const initiateTodoAsync = createAsyncThunk(
	'todolist/fetchTodos',
	async () => {
		const data = await fetchTodos();
		// The value we return becomes the `fulfilled` action payload
		return data;
	}
);

export const todolistSlice = createSlice({
	name: 'todolist',
	initialState,
	reducers: {
		addTodo: (state, action: PayloadAction<TodoType>) => {
			const collectIds = state.value?.map((item) => item.id);
			const newId = collectIds?.length > 0 ? Math.max(...collectIds) : 0;
			const newTodo = {
				...action.payload,
				id: newId + 1,
				createdAt: moment(new Date()).format('YYYY-MM-DD hh:mm'),
			};
			state.value.push(newTodo);
		},
		removeTodoById: (state, action: PayloadAction<number>) => {
			state.value = state.value?.filter((item) => item?.id !== action.payload);
		},
		updateTodo: (state, action: PayloadAction<TodoType>) => {
			state.value = state.value?.map((todo) => {
				if (todo.id === action.payload?.id) {
					console.log(action.payload);
					return action.payload;
				}
				return todo;
			});
		},
		filterTodoByStatus: (state, action: PayloadAction<number>) => {
			state.value = state.value?.filter(
				(todo) => todo.status === action.payload
			);
		},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(initiateTodoAsync.pending, (state) => {
				state.status = 'loading';
			})
			.addCase(initiateTodoAsync.fulfilled, (state, action) => {
				state.status = 'idle';
				if (state.value?.length < 1) {
					state.value = action.payload;
				}
			});
	},
});

export const { addTodo, removeTodoById, filterTodoByStatus, updateTodo } =
	todolistSlice.actions;

export const selectTodo = (state: RootState) => state.todolist.value;
export const statusTodo = (state: RootState) => state.todolist.status;

export default todolistSlice.reducer;
